/**
 * Copyright (c) 2009 - 2012 Red Hat, Inc.
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */
package org.candlepin.policy;

import java.util.LinkedList;
import java.util.List;


/**
 * Results of an enforcer validation. Basically used to support multiple
 * errors being generated by an attempt to consume (perhaps multiple attribute
 * checks failed), but also the possibility of warnings, which do not actually
 * prevent the entitlement from being given out.
 */
public class ValidationResult {

    private List<RulesValidationError> errors;
    private List<RulesValidationWarning> warnings;

    /**
     * default ctor
     */
    public ValidationResult() {
        errors = new LinkedList<>();
        warnings = new LinkedList<>();
    }

    /**
     * Return the list of errors if any.
     * @return the list of errors if any.
     */
    public List<RulesValidationError> getErrors() {
        return errors;
    }

    /**
     * Add an errorKey
     * @param errorKey error to add
     */
    public void addError(RulesValidationError errorKey) {
        errors.add(errorKey);
    }

    /**
     * Add an error message.
     * NOTE: The error needs to be translated already!
     *
     * @param errorMessage translated error string to add
     */
    public void addError(String errorMessage) {
        RulesValidationError errorKey = (i18n, args) -> errorMessage;
        errors.add(errorKey);
    }

    /**
     * Return the list of warnings if any.
     * @return the list of warnings if any.
     */
    public List<RulesValidationWarning> getWarnings() {
        return warnings;
    }

    /**
     * Add a warningKey
     * @param warningKey warning to add
     */
    public void addWarning(RulesValidationWarning warningKey) {
        warnings.add(warningKey);
    }

    public void add(ValidationResult result) {
        errors.addAll(result.getErrors());
        warnings.addAll(result.getWarnings());
    }

    /**
     * Returns true if there were any errors during validation.
     * @return true if there were any errors during validation.
     */
    public boolean hasErrors() {
        return !errors.isEmpty();
    }

    /**
     * Returns true if there were any warnings during validation.
     * @return true if there were any warnings during validation.
     */
    public boolean hasWarnings() {
        return !warnings.isEmpty();
    }

    /**
     * Returns true if validation is successful, false otherwise.
     * @return true if validation is successful, false otherwise.
     */
    public boolean isSuccessful() {
        return !hasErrors();
    }

}
